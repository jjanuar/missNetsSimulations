---
title: "20250129_ergmSqEndoXBernDplots"
format: html
editor: visual
---

## Load stuff

```{r loading stuff}
# packages
library(here)
library(magrittr)
library(ggplot2)
library(dplyr)

# initialise
thetaList = list()
impStatList = list()
auxStatList = list()

# entr values
entrValues = c(-0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3)

# loop because i can't be bothered
for(entrValInd in 1:length(entrValues)){
  
  # load the specific object
  load(here("Output", "20250129_ergmSqEndoXBernD", paste("20250129_ergmSqOut_entrVal", entrValues[entrValInd] ,".RData", sep = "")))

  
  # take specific objects and put it in the lists
  thetaList[[entrValInd]] = ergmSqRes$sampledThetas
  impStatList[[entrValInd]] = ergmSqRes$impNetStatMat
  auxStatList[[entrValInd]] = ergmSqRes$auxNetStatMat
}

# true stats for reference
trueStats = c(133, 85, 183.8, 33.6, 100.4)
trueModelCoef = c(-4.383, 0.948, 1.374, 0.168, -0.498)

```

## Plot stuff

```{r plot those plots}
# prepare the plot data
thetaPlotData = data.frame(param = NA,
                           mean = NA,
                           lower = NA,
                           upper = NA,
                           entrVal = NA)

impStatPlotData = data.frame(param = NA,
                             mean = NA,
                             lower = NA,
                             upper = NA,
                             entrVal = NA)

auxStatPlotData = data.frame(param = NA,
                             mean = NA,
                             lower = NA,
                             upper = NA,
                             entrVal = NA)

# I don't know how to vectorise this in the time it takes to loop this.
trial = 1

for(entrValInd in 1:length(entrValues)){
  
  # sampled thetas
  thetaPlotData[trial:(trial+4),'param'] = names(colMeans(thetaList[[entrValInd]]))
  thetaPlotData[trial:(trial+4),'mean'] = colMeans(thetaList[[entrValInd]])
  thetaPlotData[trial:(trial+4),'lower'] = as.numeric(apply(thetaList[[entrValInd]], MARGIN = 2, FUN = quantile, probs = 0.025))
  thetaPlotData[trial:(trial+4),'upper'] = as.numeric(apply(thetaList[[entrValInd]], MARGIN = 2, FUN = quantile, probs = 0.975))
  thetaPlotData[trial:(trial+4),'entrVal'] = entrValues[entrValInd]
  
  # imputed network statistics
  impStatPlotData[trial:(trial+4),'param'] = names(colMeans(impStatList[[entrValInd]]))
  impStatPlotData[trial:(trial+4),'mean'] = colMeans(impStatList[[entrValInd]])
  impStatPlotData[trial:(trial+4),'lower'] = as.numeric(apply(impStatList[[entrValInd]], MARGIN = 2, FUN = quantile, probs = 0.025))
  impStatPlotData[trial:(trial+4),'upper'] = as.numeric(apply(impStatList[[entrValInd]], MARGIN = 2, FUN = quantile, probs = 0.975))
  impStatPlotData[trial:(trial+4),'entrVal'] = entrValues[entrValInd]
    
  # auxiliary network statistics
  auxStatPlotData[trial:(trial+4),'param'] = names(colMeans(auxStatList[[entrValInd]]))
  auxStatPlotData[trial:(trial+4),'mean'] = colMeans(auxStatList[[entrValInd]])
  auxStatPlotData[trial:(trial+4),'lower'] = as.numeric(apply(auxStatList[[entrValInd]], MARGIN = 2, FUN = quantile, probs = 0.025))
  auxStatPlotData[trial:(trial+4),'upper'] = as.numeric(apply(auxStatList[[entrValInd]], MARGIN = 2, FUN = quantile, probs = 0.975))
  auxStatPlotData[trial:(trial+4),'entrVal'] = entrValues[entrValInd]  
  
  # advance the trial index
  trial = trial + 5
}

# plot it individually
thetaPlotData %>% 
  filter(param == 'edges') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueModelCoef[1], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) edges estimate") + 
  ggtitle("Estimate - Edges") + 
  theme_classic()

thetaPlotData %>% 
  filter(param == 'gwdeg.fixed.0.69') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueModelCoef[2], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) Gwdeg estimate") + 
  ggtitle("Estimate - GWDeg") + 
  theme_classic()

thetaPlotData %>% 
  filter(param == 'gwesp.fixed.0.69') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueModelCoef[3], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) GWESP estimate") + 
  ggtitle("Estimate - GWESP") + 
  theme_classic()

thetaPlotData %>% 
  filter(param == 'nodecov.Age') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  geom_hline(yintercept = trueModelCoef[4], col = "forestgreen") +
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) age covariate estimate") + 
  ggtitle("Estimate - Age covariate") + 
  theme_classic()

thetaPlotData %>% 
  filter(param == 'absdiff.Age') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  geom_hline(yintercept = trueModelCoef[5], col = "forestgreen") +
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) age difference estimate") + 
  ggtitle("Estimate - Age difference") + 
  theme_classic()

# and now for the imputed network statistics
impStatPlotData %>% 
  filter(param == 'edges') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[1], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) edges MVP") + 
  ggtitle("Impnet stats - Edges") + 
  theme_classic()

impStatPlotData %>% 
  filter(param == 'gwdeg.fixed.0.69') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  geom_hline(yintercept = trueStats[2], col = "forestgreen") +
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) Gwdeg MVP") + 
  ggtitle("Impnet stats - GWDeg") + 
  theme_classic()

impStatPlotData %>% 
  filter(param == 'gwesp.fixed.0.69') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[3], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) GWESP MVP") + 
  ggtitle("Impnet stats - GWESP") + 
  theme_classic()

impStatPlotData %>% 
  filter(param == 'nodecov.Age') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[4], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) age covariate MVP") + 
  ggtitle("Impnet stats - Age covariate") + 
  theme_classic()

impStatPlotData %>% 
  filter(param == 'absdiff.Age') %>% 
  ggplot(., mapping = aes(x = entrVal, y = mean)) + 
  geom_line() + 
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[5], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) + 
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) age difference MVP") + 
  ggtitle("Impnet stats - Age difference") + 
  theme_classic()

# and auxiliary?
## NOTE: their axes are really wide and not too useful.
auxStatPlotData %>%
  filter(param == 'edges') %>%
  ggplot(., mapping = aes(x = entrVal, y = mean)) +
  geom_line() +
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[1], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) edges MVP") +
  ggtitle("Auxnet - Edges") +
  theme_classic()

auxStatPlotData %>%
  filter(param == 'gwdeg.fixed.0.69') %>%
  ggplot(., mapping = aes(x = entrVal, y = mean)) +
  geom_line() +
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[2], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) Gwdeg MVP") +
  ggtitle("Auxnet - GWDeg") +
  theme_classic()

auxStatPlotData %>%
  filter(param == 'gwesp.fixed.0.69') %>%
  ggplot(., mapping = aes(x = entrVal, y = mean)) +
  geom_line() +
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[3], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) GWESP MVP") +
  ggtitle("Auxnet - GWESP") +
  theme_classic()

auxStatPlotData %>%
  filter(param == 'nodecov.Age') %>%
  ggplot(., mapping = aes(x = entrVal, y = mean)) +
  geom_line() +
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[4], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) age covariate MVP") +
  ggtitle("Auxnet - Age covariate") +
  theme_classic()

auxStatPlotData %>%
  filter(param == 'absdiff.Age') %>%
  ggplot(., mapping = aes(x = entrVal, y = mean)) +
  geom_line() +
  geom_vline(xintercept = 0.2, col = "darkblue") +
  geom_vline(xintercept = 0, col = "black", linetype = 'dotted') + 
  geom_hline(yintercept = trueStats[5], col = "forestgreen") +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
  labs(x = "Entrainment adjustment value", y = "Mean (95% CI) age difference MVP") +
  ggtitle("Auxnet - Age difference") +
  theme_classic()
```






## Testing things

```{r}
alpha = -0.8492
psi = 0

# log penalty testing
penaltyfn = function(alpha, psi){
  out = psi + log((1 + exp(alpha))/(1 + exp(alpha + psi)))
  return(out)
}



penaltyfn(alpha, 0.1)

alpha = -0.8492
plot(x = seq(from = -2, to=2, length.out = 100), y = penaltyfn(alpha, psi = seq(from = -2, to=2, length.out=100)), type = 'l', xlim = c(-2.25, 2.25), ylim = c(-2, 2), xlab = "entrainment", ylab = "log-penalty", col = "red")

alpha = -1.3
lines(x = seq(from = -2, to=2, length.out = 100), y = penaltyfn(alpha, psi = seq(from = -2, to=2, length.out=100)), type = 'l',  col="blue")

alpha = -0.54
lines(x = seq(from = -2, to=2, length.out = 100), y = penaltyfn(alpha, psi = seq(from = -2, to=2, length.out=100)), type = 'l', col="green")

lines(x = seq(from = -2, to=2, length.out = 100), y = seq(from = -2, to=2, length.out = 100), type = 'l', col="gray")
abline(v = 0, h = 0, col ="black")

```

